{"version":3,"file":"cookie.service.d.ts","sources":["cookie.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { CookieOptionsProvider } from './cookie-options.provider';\nimport { CookieDict, CookieOptions, ICookieService, ICookieWriterService } from './cookie.model';\nexport declare class CookieService implements ICookieService {\n    private document;\n    private optionsProvider;\n    private cookieWriterService;\n    protected options: CookieOptions;\n    constructor(document: any, optionsProvider: CookieOptionsProvider, cookieWriterService: ICookieWriterService);\n    /**\n     * @description\n     * Returns if the given cookie key exists or not.\n     *\n     * @param key Id to use for lookup.\n     * @returns true if key exists, otherwise false.\n     */\n    hasKey(key: string): boolean;\n    /**\n     * @description\n     * Returns the value of given cookie key.\n     *\n     * @param key Id to use for lookup.\n     * @returns Raw cookie value.\n     */\n    get(key: string): string;\n    /**\n     * @description\n     * Returns the deserialized value of given cookie key.\n     *\n     * @param key Id to use for lookup.\n     * @returns Deserialized cookie value.\n     */\n    getObject(key: string): object | undefined;\n    /**\n     * @description\n     * Returns a key value object with all the cookies.\n     *\n     * @returns All cookies\n     */\n    getAll(): CookieDict;\n    /**\n     * @description\n     * Sets a value for given cookie key.\n     *\n     * @param key Id for the `value`.\n     * @param value Raw value to be stored.\n     * @param options (Optional) Options object.\n     */\n    put(key: string, value: string | undefined, options?: CookieOptions): void;\n    /**\n     * @description\n     * Serializes and sets a value for given cookie key.\n     *\n     * @param key Id for the `value`.\n     * @param value Value to be stored.\n     * @param options (Optional) Options object.\n     */\n    putObject(key: string, value: object, options?: CookieOptions): void;\n    /**\n     * @description\n     * Remove given cookie.\n     *\n     * @param key Id of the key-value pair to delete.\n     * @param options (Optional) Options object.\n     */\n    remove(key: string, options?: CookieOptions): void;\n    /**\n     * @description\n     * Remove all cookies.\n     */\n    removeAll(options?: CookieOptions): void;\n}\n"]}